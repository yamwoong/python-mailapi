전체 구현 순서
STEP 0. 베이스 셋업 (환경·브랜치·실행)

Goal: 모든 서비스가 로컬에서 뜨는 최소 실행 기반.

Tasks: .env 분리, docker-compose.override.yml, 브랜치 전략(main/dev/feature/*).

DoD: docker compose up --build 성공, /health 200.

Quick test: curl :3000/health, FastAPI docs(:8000/docs) 열림.

STEP 1. API 안정화 (검증·에러·응답 포맷)

Goal: /summaries 요청/응답 스키마 고정 + 일관된 에러 처리.

Tasks: class-validator DTO, 전역 에러핸들러, 성공 응답 래퍼.

DoD: 잘못된 입력은 400 {code,message}, 정상은 201 {data}.

Quick test: 빈 text로 요청 → 400; 정상 요청 → 201.

STEP 2. 목록 조회 강화 (검색·페이지네이션·정렬)

Goal: 실제로 탐색 가능한 리스트 API.

Tasks: GET /summaries?query=&page=&limit=&sort=, 인덱스(subject/sender/createdAt).

DoD: { data:[], meta:{total,page,limit} }, 최신순 기본, 키워드 검색 동작.

Quick test: curl ":3000/summaries?query=welcome&page=1&limit=10".

STEP 3. 최소 웹페이지 (React+TS) — E2E 확보

Goal: 눈으로 확인되는 E2E(목록/상세/에러 토스트).

Tasks: /summaries 리스트·상세, useSummaries/useSummary 훅, API 에러 UX.

DoD: 브라우저에서 생성 → 조회 → 상세 표시까지 됨.

Quick test: 더미 POST 후 화면에서 보임.

STEP 4. 실제 요약 모델 적용 (Transformers)

Goal: 더미 → 실모델로 스위치, 품질/성능 균형.

Tasks: transformers/torch 설치, BART/T5, 타임아웃/청크/메모리 가드.

DoD: p95 지연 허용 범위 내, 요약 품질 체감 향상.

Quick test: 긴 본문 POST → 타임아웃 없이 요약 반환.

STEP 5. 한국어 번역 (EN→KO)

Goal: 다국어 가치 제공, 실패 시 우아한 폴백.

Tasks: Google Translate 연동(키 관리), 옵션 플래그, 프론트 표기.

DoD: koSummary 정상 저장/표시, 실패 시 영문만.

Quick test: 번역 ON/OFF 비교, 장애 주입 시도→UX 유지.

STEP 6. Google OAuth2 로그인 & 토큰 저장

Goal: 사용자별 Gmail 접근 권한 확립.

Tasks: /auth/google 플로우, refresh token 암호화 저장/갱신, 보호 라우트.

DoD: 로그인/로그아웃/갱신 OK, 비로그인 접근 차단.

Quick test: 로그인 후 대시보드 진입·갱신 토큰 로테이션 확인.

STEP 7. Gmail 수집(ingestion) & 중복 방지

Goal: 자동으로 메일 수집→요약 적재.

Tasks: Polling(초기)로 최근 N개 본문 추출, Message-ID dedupe, 실패 재시도.

DoD: 새 메일이 일정 주기 내 자동 요약·표시, 중복 0건.

Quick test: 테스트 메일 수신 → 대시보드 반영 확인.

STEP 8. 비동기화(큐) — 빠른 응답, 백그라운드 처리

Goal: 대량/긴 요약에도 API는 즉시 응답.

Tasks: Redis + BullMQ, 202 Accepted 패턴, 상태(processing/done/failed) 관리.

DoD: 동시 20+건에서도 API 지연 최소, 결과는 후속 반영.

Quick test: 다건 POST → 즉시 202, 잠시 후 목록에 결과.

STEP 9. 테스트 & CI

Goal: 신뢰 가능한 변경과 리뷰 사이클.

Tasks: Jest/Supertest(서버), MongoMemoryServer; Pytest(요약기); GitHub Actions.

DoD: 핵심 경로 커버리지 충족(예: 80%+), PR 자동 테스트 그린.

Quick test: npm test, pytest -q 통과, Actions 성공 배지.

STEP 10. 운영 준비 (보안·로깅·배포)

Goal: 프로덕션 안정성.

Tasks: CORS/보안 헤더/레이트리밋, 구조화 로깅(JSON), 헬스/레디니스 프로브, docker-compose.prod.yml & EC2 가이드.

DoD: 프로드 컴포즈로 기동, 헬스 OK, 기본 모니터링/로그 확인.

Quick test: 배포 환경에서 대시보드 접근·헬스·로그 점검.

진행 팁 (짧게)

기능 플래그로 교체 비용 최소화: USE_DUMMY_SUMMARIZER / TRANSLATE_ENABLED.

매 스텝마다 **“DoD + Quick test”**를 끝내고 다음으로 이동.

브랜치: feature/* 단위로 PR → CI green → dev 머지.